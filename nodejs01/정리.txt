node.js
- 서버환경에서 작동하는 js
- 노드로 JS로 작성된 서버 실행 가능
- 속도면에서 성능 우수 → 대규모 애플리케이션 개발 가능
- 이벤트를 기반으로 하는 비동기 방식으로 네트워크 입출력을 처리
- ( 기존의 방식은 스레드 기반의 동기 방식으로 네트워크 입출력을 처리함 )


✅ 논블록킹  IO (non-blocking IO)
- 오래 걸리는 함수를 백그라운드로 보내서 다음 코드가 먼저 실행되게 하고 오래 걸리는 함수를 실행
    - node.js는 논 블록킹 방식하에서 일부 코드는 백그라운드에서 병렬 실행된다
    일부코드 : IO 작업, 압축, 암호화 등
    - 나머지 코드는 블로킹 방식으로 실행됨
    - IO 작업이 많을 때 노트 활용성이 극대화된다

✅ 스레드기반 동기식 방식
- 몸을 복제해 동시에 여러 가게에 간다(스레드)
- 작업이 들어올 때마다 스레드를 만들어 동시에 일을 처리한다
- 일이 많아 질수록 스레드가 증가해 메모리 사용량이 늘어나는 단점이 있다


✅ 이벤트기반 비동기식 방식
(node.js의 방식)
- 대규모 네트워크 애플리케이션 개발에 적합하다
- 각 가게를 돌며 대기표를 받고 기다리다가 때가 되면 물건을 받는 방식
- 대기번호를 부르는 이벤트가 발생하는 순간 물건을 받아온다 (복제X)

장점
- 자바스크립트를 사용한다
- 구글이 만든 자바스크립트 엔진을 사용한다(V8 자바스크립트 엔진)

단점
- 네트워크 어플리케이션에 문제가 발생하는 순간 애플리케이션 전체가 영향을 받을 수 있다
- 자바스크립트를 사용하는 것이 단점이 될 수 있다
- v8 자바스크립트 엔진이 아무리 빨라도 c나 c++로 개발된 서버 애플리케이션보다는 느리다


✅ 콜백함수
- 콜백함수는 특정 상황에서 실행될 함수를 시스템에 등록해두면, 그러한 상황이 발생되었을 때 시스템이 자동으로 실행해주는 함수이다
- 콜백함수를 사용하면 일을 처리하는 동안 다른 일도 할 수 있다
- 콜백함수의 과정이 끝나기 전에 다음 프로세스를 진행하게 되는 경우가 있는데 데이터가 없는데 출력하는 경우 underfined가 보여질 수 있다
- ex : 알람시계


✅ PROCESS 객체
- 프로그램과 관련된 정보를 나타내는 객체
- node.js 만 가진 객체

// process 객체
// 시간 측정을 시작합니다
console.time('mirim');
var output = 0;
for (var i = 1; i < 100; i++) {
    output += i;  
}
process.exit(); // 프로그램 종료
console.log('Result : ', output);
// 시간 측정을 종료합니다
console.timeEnd('mirim');


✅ node.js 내장모듈
- os : 운영체제의 정보를 가져올 수 있다
- path : 폴더와 파일의 경로를 쉽게 조작하도록 도와주는 모듈이다
- url 모듈 : 인터넷 주소를 다루는데 사용한다
- query string 모듈 : url 객체의 쿼리를 다루는데 사용한다
- crypto 모듈 : 해시 생성과 암호화를 수행한다
- util 모듈 : node.js 의 편의 기능으로 보조 기능을 모아두었다, 추가되는 api도 있지만 deprecated 되어 사라지는 경우도 있다